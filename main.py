import logging
import ssl
import aiohttp
import asyncio
import random
import os
from typing import List, Dict, Set
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ChatMemberOwner, ChatMemberAdministrator, ChatMember, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ParseMode, ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("misc.env")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
COHERE_API_KEY = os.getenv("COHERE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
user_histories = {}
chat_members: Dict[int, Set[int]] = {}
chat_admins: Dict[int, Set[int]] = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
participants_file = "participants.txt"


class Form(StatesGroup):
    gpt_input = State()


def save_participant(chat_id: int,
                     user_id: int,
                     username: str = None,
                     first_name: str = None,
                     action: str = "register"):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ñ–∞–π–ª"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–∞–π–ª–µ (–ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
    if os.path.exists(participants_file):
        with open(participants_file, 'r', encoding='utf-8') as f:
            existing_lines = f.readlines()
            for line in existing_lines:
                if f"Chat: {chat_id}, User: {user_id}" in line:
                    return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ

    with open(participants_file, 'a', encoding='utf-8') as f:
        user_info = f"@{username}" if username else first_name or f"User_{user_id}"
        f.write(
            f"Chat: {chat_id}, User: {user_id}, Name: {user_info}, Action: {action}\n"
        )


def load_participants_from_file(chat_id: int) -> List[int]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    participants = []
    if os.path.exists(participants_file):
        with open(participants_file, 'r', encoding='utf-8') as f:
            for line in f:
                if f"Chat: {chat_id}" in line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "Chat: -1002629246104, User: 1693165490, Name: @RookingIt, Action: message"
                    parts = line.split(", ")
                    for part in parts:
                        if part.startswith("User: "):
                            user_id = int(part.replace("User: ", ""))
                            if user_id not in participants:
                                participants.append(user_id)
                            break
    return participants


async def get_chat_members(chat_id: int) -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    try:
        members = []
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ get_chat_members_count
        count = await bot.get_chat_member_count(chat_id)
        logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ {chat_id}: {count}")
        return members
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return []


async def update_chat_members(chat_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    members = await get_chat_members(chat_id)
    chat_members[chat_id] = set(members)
    # –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤
    try:
        admins = await bot.get_chat_administrators(chat_id)
        admin_ids = []
        for admin in admins:
            if not admin.user.is_bot:
                admin_ids.append(admin.user.id)
        chat_admins[chat_id] = set(admin_ids)
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(admin_ids)} –∞–¥–º–∏–Ω–æ–≤ –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
        chat_admins[chat_id] = set()


async def get_user_mention(user_id: int, chat_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        user = member.user
        if user.username:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            username = user.username.replace('_', '\\_').replace(
                '*', '\\*').replace('[', '\\[').replace(']', '\\]').replace(
                    '(',
                    '\\(').replace(')', '\\)').replace('~', '\\~').replace(
                        '`',
                        '\\`').replace('>', '\\>').replace('#', '\\#').replace(
                            '+', '\\+').replace('-', '\\-').replace(
                                '=', '\\=').replace('|', '\\|').replace(
                                    '{', '\\{').replace('}', '\\}').replace(
                                        '.', '\\.').replace('!', '\\!')
            return f"@{username}"
        else:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –¥–ª—è Markdown
            first_name = user.first_name.replace('_', '\\_').replace(
                '*', '\\*').replace('[', '\\[').replace(']', '\\]').replace(
                    '(',
                    '\\(').replace(')', '\\)').replace('~', '\\~').replace(
                        '`',
                        '\\`').replace('>', '\\>').replace('#', '\\#').replace(
                            '+', '\\+').replace('-', '\\-').replace(
                                '=', '\\=').replace('|', '\\|').replace(
                                    '{', '\\{').replace('}', '\\}').replace(
                                        '.', '\\.').replace('!', '\\!')
            return f"[{first_name}](tg://user?id={user_id})"
    except Exception:
        return f"[User {user_id}](tg://user?id={user_id})"


def is_group_chat(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º"""
    return message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]


async def log_user_activity(message: Message, action: str = "message"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user and is_group_chat(message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        user = message.from_user

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        if chat_id not in chat_members:
            chat_members[chat_id] = set()
        chat_members[chat_id].add(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        save_participant(chat_id, user_id, user.username, user.first_name,
                         action)


async def ask_cohere(user_id: int, prompt: str):
    """–ó–∞–ø—Ä–æ—Å –∫ Cohere API"""
    url = "https://api.cohere.ai/v1/chat"
    headers = {
        "Authorization": f"Bearer {COHERE_API_KEY}",
        "Content-Type": "application/json"
    }

    history = user_histories.get(user_id, [])
    history.append({"role": "USER", "message": prompt})

    payload = {
        "model":
        "command-r-plus",
        "message":
        prompt,
        "chat_history":
        history,
        "preamble":
        ("–¢—ã ‚Äî –ö–æ—Ä–∞–ª–ª, —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ—Ç. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã, "
         "–æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞–∑–≤–ª–µ–∫–∞–µ—à—å –∏ —Å–æ–∑–¥–∞—ë—à—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. "
         "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∂–∏–≤–æ, —Å —é–º–æ—Ä–æ–º, –Ω–æ –≤—Å–µ–≥–¥–∞ –≤–µ–∂–ª–∏–≤–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ. "
         "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É üêô")
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers,
                                    json=payload) as resp:
                if resp.status != 200:
                    return f"‚ùå –û—à–∏–±–∫–∞ AI: {resp.status}"
                result = await resp.json()
                reply = result.get("text", "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
                history.append({"role": "CHATBOT", "message": reply})
                user_histories[user_id] = history[-10:]
                return reply
    except Exception as e:
        return f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"


@dp.message()
async def handle_message(message: Message, state: FSMContext):
    if not message.text:
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
        await log_user_activity(message, "media")
        return

    text = message.text.lower().strip()

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await log_user_activity(message, "message")

    if is_group_chat(message):
        chat_id = message.chat.id
        if chat_id not in chat_members:
            await update_chat_members(chat_id)

    # –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª—ç—à–∞
    if text.startswith("–∫–æ—Ä–∞–ª–ª") or text.startswith("coral"):
        prompt = message.text[6:].strip() if text.startswith(
            "–∫–æ—Ä–∞–ª–ª") else message.text[5:].strip()
        if prompt:
            response = await ask_cohere(message.from_user.id, prompt)
            await message.answer(response, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.answer("üêô –ö–æ—Ä–∞–ª–ª —Å–ª—É—à–∞–µ—Ç! –û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?")

    elif text in ["–ø–∏–Ω–≥", "ping"]:
        ping_responses = [
            "üèì –ü–æ–Ω–≥! –ö–æ—Ä–∞–ª–ª –Ω–∞ —Å–≤—è–∑–∏!", "üéØ –ü–æ–ø–∞–ª! –Ø –∑–¥–µ—Å—å!",
            "‚ö° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ –æ—Ç–≤–µ—á–∞—é!", "üöÄ –ö–æ—Ä–∞–ª–ª –≤ –¥–µ–ª–µ!", "üí´ –ö–∞–∫ –¥–µ–ª–∞? –Ø —Ç—É—Ç!",
            "üåä –ü–ª–µ—â—É—Å—å –≤ —á–∞—Ç–µ!", "üêô –©—É–ø–∞–ª—å—Ü–∞ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!"
        ]
        await message.answer(random.choice(ping_responses))

    elif text in ["–ø–æ–º–æ—â—å", "–∫–æ–º–∞–Ω–¥—ã", "help"]:
        help_text = """üêô **–ö–æ–º–∞–Ω–¥—ã –ö–æ—Ä–∞–ª–ª–∞:**

**–û–±—â–µ–Ω–∏–µ:**
‚Ä¢ –∫–æ—Ä–∞–ª–ª [–≤–æ–ø—Ä–æ—Å] ‚Äî –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò
‚Ä¢ –ø–∏–Ω–≥ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞

**–ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ —à–∏–ø ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–∏–ª—É—é –ø–∞—Ä–æ—á–∫—É
‚Ä¢ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
‚Ä¢ –º–∏—Å—Å–∏—è ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ —É—á–∞—Å—Ç–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ —Ü–∏—Ç–∞—Ç–∞ ‚Äî –º—É–¥—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞
‚Ä¢ —Ñ–∞–∫—Ç ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
‚Ä¢ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
‚Ä¢ –º–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∑–∞
‚Ä¢ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ —á–µ–ª–ª–µ–Ω–¥–∂ ‚Äî –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –¥–Ω—è

**–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:**
‚Ä¢ –≥–æ—Ä–æ—Å–∫–æ–ø ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞
‚Ä¢ —Ä–µ—Ü–µ–ø—Ç ‚Äî –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
‚Ä¢ –∏–≥—Ä–∞ ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
‚Ä¢ –∑–∞–≥–∞–¥–∫–∞ ‚Äî –∑–∞–≥–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
‚Ä¢ –∏—Å—Ç–æ—Ä–∏—è ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã
‚Ä¢ –ø–æ–∫–µ—Ä ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –º–æ–Ω–µ—Ç–∫–∞ ‚Äî –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
‚Ä¢ –∫—É–±–∏–∫ ‚Äî –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏

**–ò–Ω—Ñ–æ:**
‚Ä¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
‚Ä¢ –∞–¥–º–∏–Ω—ã ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"""
        await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

    elif text == "—É—á–∞—Å—Ç–∏–µ":
        if not is_group_chat(message):
            await message.answer("üêô –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                callback_data=
                f"register_{message.chat.id}_{message.from_user.id}")
        ]])

        await message.answer("üêô –•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –≥—Ä—É–ø–ø—ã?",
                             reply_markup=keyboard)

    elif text == "—à–∏–ø":
        if not is_group_chat(message):
            await message.answer("üêô –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        file_participants = load_participants_from_file(message.chat.id)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞
        cache_participants = list(chat_members.get(message.chat.id, set()))
        all_participants = list(set(file_participants + cache_participants))

        # –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not all_participants:
            if message.chat.id not in chat_members:
                chat_members[message.chat.id] = set()
            chat_members[message.chat.id].add(message.from_user.id)
            all_participants = [message.from_user.id]

        if len(all_participants) < 2:
            await message.answer(
                "üêô –í –≥—Ä—É–ø–ø–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞."
            )
            return

        pair = random.sample(all_participants, 2)
        mention1 = await get_user_mention(pair[0], message.chat.id)
        mention2 = await get_user_mention(pair[1], message.chat.id)
        wishes = [
            "–ñ–µ–ª–∞–µ–º –≤–∞–º —Å—á–∞—Å—Ç—å—è –∏ –ª—é–±–≤–∏!",
            "–ü—É—Å—Ç—å –≤–∞—à–∞ –¥—Ä—É–∂–±–∞ –∫—Ä–µ–ø–Ω–µ—Ç —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º!",
            "–õ—é–±–∏—Ç–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞!",
            "–ü—É—Å—Ç—å –≤–∞—à–∏ –¥–Ω–∏ –±—É–¥—É—Ç –ø–æ–ª–Ω—ã —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è!",
            "–í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Ä—è–¥–æ–º –∏ —Ü–µ–Ω–∏—Ç–µ –º–æ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ!",
            "–ü—É—Å—Ç—å –≤–∞—à–∞ —Å–≤—è–∑—å –±—É–¥–µ—Ç –∫—Ä–µ–ø–∫–æ–π –∫–∞–∫ –∫–æ—Ä–∞–ª–ª—ã!",
            "–í–º–µ—Å—Ç–µ –≤—ã –Ω–µ–ø–æ–±–µ–¥–∏–º—ã!",
            "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!",
            "–í–∞—à–∞ –¥—Ä—É–∂–±–∞ ‚Äî –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ!",
            "–ü—É—Å—Ç—å —Å–º–µ—Ö –∏ —Ä–∞–¥–æ—Å—Ç—å –Ω–µ –ø–æ–∫–∏–¥–∞—é—Ç –≤–∞—Å!"
        ]
        wish = random.choice(wishes)
        await message.answer(f"üíï –ü–º–∏—Å–∏–∞—Ä–æ—á–∫–∞: {mention1} –∏ {mention2}. {wish}",
                             parse_mode=ParseMode.MARKDOWN)

    elif text == "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
        predictions = [
            "üîÆ –ù–µ –±–æ–π—Å—è –º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å!", "‚ú® –ß—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Å–∫–æ—Ä–æ.",
            "üåü –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.", "üçÄ –£–¥–∞—á–∞ —É–ª—ã–±–Ω—ë—Ç—Å—è —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è.",
            "üéØ –¢–≤–æ–∏ –º–µ—á—Ç—ã –±–ª–∏–∂–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.",
            "üåà –ü–æ—Å–ª–µ –¥–æ–∂–¥–∏—á–∫–∞ –≤ —á–µ—Ç–≤–µ—Ä–≥ –±—É–¥–µ—Ç —Ä–∞–¥—É–≥–∞.",
            "üíé –¢—ã –Ω–∞–π–¥—ë—à—å —Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –∏—Å–∫–∞–ª.",
            "üöÄ –í–ø–µ—Ä–µ–¥–∏ —Ç–µ–±—è –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
            "üé™ –ñ–∏–∑–Ω—å –≥–æ—Ç–æ–≤–∏—Ç —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑.",
            "üå∏ –¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Ç–µ–±–µ —Å—Ç–æ—Ä–∏—Ü–µ–π."
        ]
        await message.answer(random.choice(predictions))

    elif text == "–º–∏—Å—Å–∏—è":
        tasks = [
            "üéØ –°–∫–∞–∂–∏ '–±–∞–Ω–∞–Ω' –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ.",
            "ü§ù –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∫–æ–º—É-—Ç–æ.",
            "üíù –°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É.", "üìö –ü–æ–¥–µ–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–æ–º.",
            "üéµ –ù–∞–ø–æ–π –ø–µ—Å–Ω—é (—Ç–µ–∫—Å—Ç–æ–º).", "ü§î –ó–∞–¥–∞–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å.",
            "üé≠ –†–∞—Å—Å–∫–∞–∂–∏ —Å–º–µ—à–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é.", "üåü –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∫–æ–≥–æ-—Ç–æ –∑–∞ —á—Ç–æ-—Ç–æ.",
            "üé® –û–ø–∏—à–∏ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å.", "üöÄ –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –º–µ—á—Ç–æ–π."
        ]
        mission = random.choice(tasks)
        await message.answer(f"üéØ –¢–≤–æ—è –º–∏—Å—Å–∏—è: {mission}")

    elif text == "—Ü–∏—Ç–∞—Ç–∞":
        quotes = [
            "üí´ '–ë—É–¥—å —Å–æ–±–æ–π ‚Äî –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.' ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
            "üåü '–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã.' ‚Äî –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
            "üéØ '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.' ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "üåà '–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –Ω–µ —Ü–µ–ª—å, –∞ –ø–æ–±–æ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∂–∏–∑–Ω–∏.' ‚Äî –≠–ª–µ–æ–Ω–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
            "üöÄ '–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.' ‚Äî –≠–ª–µ–æ–Ω–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
            "üíé '–ù–µ –∂–¥–∏—Ç–µ –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–π.' ‚Äî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
            "üå∏ '–£–ª—ã–±–∫–∞ ‚Äî —ç—Ç–æ –∫—Ä–∏–≤–∞—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å—ë –≤—ã–ø—Ä—è–º–ª—è–µ—Ç.' ‚Äî –§–∏–ª–ª–∏—Å –î–∏–ª–ª–µ—Ä",
            "‚≠ê '–ù–∞—á–∏–Ω–∞–π—Ç–µ —Ç–∞–º, –≥–¥–µ –≤—ã –µ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å. –î–µ–ª–∞–π—Ç–µ —Ç–æ, —á—Ç–æ –º–æ–∂–µ—Ç–µ.' ‚Äî –ê—Ä—Ç—É—Ä –≠—à"
        ]
        await message.answer(random.choice(quotes))

    elif text == "—Ñ–∞–∫—Ç":
        facts = [
            "üêô –û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å!",
            "üçØ –ú—ë–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è ‚Äî –∞—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º—ë–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç!",
            "üåô –ù–∞ –õ—É–Ω–µ —Ç–≤–æ–π –≤–µ—Å –±—ã–ª –±—ã –≤ 6 —Ä–∞–∑ –º–µ–Ω—å—à–µ!",
            "üêß –ü–∏–Ω–≥–≤–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É –¥–æ 2 –º–µ—Ç—Ä–æ–≤!",
            "üåä –í –æ–∫–µ–∞–Ω–µ –±–æ–ª—å—à–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏, —á–µ–º –≤–æ –≤—Å–µ—Ö –º—É–∑–µ—è—Ö –º–∏—Ä–∞!",
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 20% –≤—Å–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —Ç–µ–ª–∞!",
            "ü¶ã –ë–∞–±–æ—á–∫–∏ –ø—Ä–æ–±—É—é—Ç –µ–¥—É –ª–∞–ø–∫–∞–º–∏!",
            "üåç –ë–∞–Ω–∞–Ω ‚Äî —ç—Ç–æ —è–≥–æ–¥–∞, –∞ –∫–ª—É–±–Ω–∏–∫–∞ ‚Äî –Ω–µ—Ç!",
            "‚ö° –ú–æ–ª–Ω–∏—è –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞!",
            "üê® –ö–æ–∞–ª—ã —Å–ø—è—Ç 22 —á–∞—Å–∞ –≤ —Å—É—Ç–∫–∏!"
        ]
        await message.answer(random.choice(facts))

    elif text == "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç":
        compliments = [
            "‚ú® –¢—ã –æ—Å–≤–µ—â–∞–µ—à—å —ç—Ç–æ—Ç —á–∞—Ç —Å–≤–æ–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º!",
            "üåü –£ —Ç–µ–±—è –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞!",
            "üí´ –¢—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å!",
            "üé® –¢–≤–æ—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç!",
            "üåà –¢—ã –∫–∞–∫ —Ä–∞–¥—É–≥–∞ –ø–æ—Å–ª–µ –¥–æ–∂–¥—è ‚Äî –ø—Ä–∏–Ω–æ—Å–∏—à—å —Ä–∞–¥–æ—Å—Ç—å!",
            "üíé –¢—ã —Ü–µ–Ω–Ω–µ–µ –ª—é–±—ã—Ö –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π!",
            "üöÄ –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ –≤ –ª—É—á—à–µ–º —Å–º—ã—Å–ª–µ!",
            "üå∏ –¢—ã –∫–∞–∫ –≤–µ—Å–µ–Ω–Ω–∏–π —Ü–≤–µ—Ç–æ–∫ ‚Äî –ø—Ä–∏–Ω–æ—Å–∏—à—å –∫—Ä–∞—Å–æ—Ç—É –≤ –∂–∏–∑–Ω—å!",
            "‚≠ê –¢—ã –∑–≤–µ–∑–¥–∞ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!", "üéµ –¢–≤–æ–π –≥–æ–ª–æ—Å –≤–∞–∂–µ–Ω –∏ –Ω—É–∂–µ–Ω!"
        ]
        await message.answer(random.choice(compliments))

    elif text == "–º–æ—Ç–∏–≤–∞—Ü–∏—è":
        motivations = [
            "üí™ –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!",
            "üéØ –ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –≤–µ–¥—ë—Ç –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏!",
            "üåü –¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã!",
            "üöÄ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!",
            "üí´ –¢—ã —É–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É!",
            "üèÜ –ü–æ–±–µ–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞!",
            "üåà –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –±—É—Ä–∏ –≤—ã—Ö–æ–¥–∏—Ç —Å–æ–ª–Ω—Ü–µ!",
            "üíé –¢—ã —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –¥–µ–ª!", "‚ö° –í —Ç–µ–±–µ –µ—Å—Ç—å —Å–∏–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä!",
            "üå∏ –í–µ—Ä—å –≤ —Å–µ–±—è ‚Äî —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É!"
        ]
        await message.answer(random.choice(motivations))

    elif text == "–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞":
        questions = [
            "ü§î –ö–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è, –µ—Å–ª–∏ —Å–º–µ—à–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π –∏ —Å–∏–Ω–∏–π?",
            "üåç –ö–∞–∫–∞—è —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –º–∏—Ä–µ?",
            "üêß –ì–¥–µ –∂–∏–≤—É—Ç –ø–∏–Ω–≥–≤–∏–Ω—ã ‚Äî –Ω–∞ –°–µ–≤–µ—Ä–Ω–æ–º –∏–ª–∏ –Æ–∂–Ω–æ–º –ø–æ–ª—é—Å–µ?",
            "üåô –°–∫–æ–ª—å–∫–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ —É –ó–µ–º–ª–∏?",
            "üçØ –ß—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –ø—á—ë–ª—ã –∫—Ä–æ–º–µ –º—ë–¥–∞?",
            "üåä –ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", "ü¶ï –í –∫–∞–∫—É—é —ç–ø–æ—Ö—É –∂–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã?",
            "üåü –ö–∞–∫–∞—è –∑–≤–µ–∑–¥–∞ –±–ª–∏–∂–∞–π—à–∞—è –∫ –ó–µ–º–ª–µ?",
            "üèõÔ∏è –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¢–∞–¥–∂-–ú–∞—Ö–∞–ª?",
            "üéµ –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä—É–Ω —É –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä—ã?"
        ]
        await message.answer(random.choice(questions))

    elif text == "—á–µ–ª–ª–µ–Ω–¥–∂":
        challenges = [
            "üì± –ß–∞—Å –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî —Å–º–æ–∂–µ—à—å?",
            "üíß –í—ã–ø–µ–π 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è!",
            "üìö –ü—Ä–æ—á–∏—Ç–∞–π 10 —Å—Ç—Ä–∞–Ω–∏—Ü –ª—é–±–æ–π –∫–Ω–∏–≥–∏.",
            "üö∂ –ü—Ä–æ–π–¥–∏ 10000 —à–∞–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è!", "üßò –ü–æ–º–µ–¥–∏—Ç–∏—Ä—É–π 5 –º–∏–Ω—É—Ç.",
            "üìû –ü–æ–∑–≤–æ–Ω–∏ —Å—Ç–∞—Ä–æ–º—É –¥—Ä—É–≥—É.", "üé® –ù–∞—Ä–∏—Å—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞ 5 –º–∏–Ω—É—Ç.",
            "üå± –ü–æ—Å–∞–¥–∏ —Å–µ–º–µ—á–∫–æ –∏–ª–∏ –ø–æ–ª–µ–π —Ä–∞—Å—Ç–µ–Ω–∏–µ.",
            "üìù –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –≤–µ—â–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω.",
            "üéµ –í—ã—É—á–∏ —Å–ª–æ–≤–∞ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏."
        ]
        challenge = random.choice(challenges)
        await message.answer(f"üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è: {challenge}")

    elif text == "–≥–æ—Ä–æ—Å–∫–æ–ø":
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        signs = [{
            "sign":
            "‚ôà –û–≤–µ–Ω",
            "predictions": [
                "–°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –ø–∏–∫–µ! –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
                "–ú–∞—Ä—Å –¥–∞—Ä–∏—Ç –≤–∞–º —Å–∏–ª—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å. –î–µ–π—Å—Ç–≤—É–π—Ç–µ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ!",
                "–í–∞—à–∞ –∏–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è —Å—ã–≥—Ä–∞–µ—Ç –≤–∞–º –Ω–∞ —Ä—É–∫—É.",
                "–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏."
            ]
        }, {
            "sign":
            "‚ôâ –¢–µ–ª–µ—Ü",
            "predictions": [
                "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ ‚Äî –≤–∞—à–∏ —Å–æ—é–∑–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è.",
                "–í–µ–Ω–µ—Ä–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è–µ—Ç –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Ñ–∏–Ω–∞–Ω—Å—ã.",
                "–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å ‚Äî –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –≤–µ—Ä–Ω–æ –∫ —É—Å–ø–µ—Ö—É.",
                "–í–∞—à–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å—ë—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –≤—ã–≥–æ–¥—É."
            ]
        }, {
            "sign":
            "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã",
            "predictions": [
                "–î–µ–Ω—å –ø–æ–ª–æ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π.",
                "–ú–µ—Ä–∫—É—Ä–∏–π —É—Å–∏–ª–∏–≤–∞–µ—Ç –≤–∞—à—É –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å.",
                "–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã.",
                "–í–∞—à–µ –æ—Å—Ç—Ä–æ—É–º–∏–µ –æ—á–∞—Ä—É–µ—Ç –æ–∫—Ä—É–∂–∞—é—â–∏—Ö."
            ]
        }, {
            "sign":
            "‚ôã –†–∞–∫",
            "predictions": [
                "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ ‚Äî –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç.",
                "–õ—É–Ω–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
                "–°–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.",
                "–ó–∞–±–æ—Ç–∞ –æ –±–ª–∏–∑–∫–∏—Ö –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ä–∞–¥–æ—Å—Ç—å."
            ]
        }, {
            "sign":
            "‚ôå –õ–µ–≤",
            "predictions": [
                "–í–∞—à —à–∞—Ä–º –∏ —Ö–∞—Ä–∏–∑–º–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –∑–∞–º–µ—Ç–Ω—ã!",
                "–°–æ–ª–Ω—Ü–µ –æ—Å–≤–µ—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–ª–∞–≤–µ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—é.",
                "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–∞—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ.",
                "–í–∞—à–∞ —â–µ–¥—Ä–æ—Å—Ç—å –±—É–¥–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∞."
            ]
        }, {
            "sign":
            "‚ôç –î–µ–≤–∞",
            "predictions": [
                "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º –ø—Ä–∏–Ω–µ—Å—ë—Ç —É—Å–ø–µ—Ö –≤ –¥–µ–ª–∞—Ö.",
                "–ú–µ—Ä–∫—É—Ä–∏–π –ø–æ–º–æ–≥–∞–µ—Ç –≤ –∞–Ω–∞–ª–∏–∑–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.",
                "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å ‚Äî –≤–∞—à–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ.",
                "–ó–¥–æ—Ä–æ–≤—å–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–±–æ—Ç—ã –∏ –≤–Ω–∏–º–∞–Ω–∏—è."
            ]
        }, {
            "sign":
            "‚ôé –í–µ—Å—ã",
            "predictions": [
                "–ì–∞—Ä–º–æ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å ‚Äî –∫–ª—é—á –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º.",
                "–í–µ–Ω–µ—Ä–∞ –¥–∞—Ä–∏—Ç –∫—Ä–∞—Å–æ—Ç—É –∏ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ.",
                "–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–¥—ä—ë–º–µ.",
                "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–∏—Ö –¥–µ–ª–∞—Ö."
            ]
        }, {
            "sign":
            "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω",
            "predictions": [
                "–ì–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –≤–∞–∂–Ω—ã–º –≤—ã–≤–æ–¥–∞–º.",
                "–ü–ª—É—Ç–æ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ —Ç–∞–π–Ω—ã.",
                "–í–∞—à–∞ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä–∞–∑–∏—Ç –¥—Ä—É–≥–∏—Ö.",
                "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏–Ω–µ—Å—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."
            ]
        }, {
            "sign":
            "‚ôê –°—Ç—Ä–µ–ª–µ—Ü",
            "predictions": [
                "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∂–¥—É—Ç –≤–∞—Å!",
                "–Æ–ø–∏—Ç–µ—Ä —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–ª—å–∑—É.",
                "–í–∞—à –æ–ø—Ç–∏–º–∏–∑–º –∑–∞—Ä–∞–∑–∏—Ç–µ–ª–µ–Ω."
            ]
        }, {
            "sign":
            "‚ôë –ö–æ–∑–µ—Ä–æ–≥",
            "predictions": [
                "–£–ø–æ—Ä—Å—Ç–≤–æ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —Ü–µ–ª–∏.",
                "–°–∞—Ç—É—Ä–Ω —É—á–∏—Ç —Ç–µ—Ä–ø–µ–Ω–∏—é –∏ –º—É–¥—Ä–æ—Å—Ç–∏.",
                "–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —É–ª—É—á—à–∞—é—Ç—Å—è.", "–í–∞—à –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç —Ä–∞—Å—Ç—ë—Ç."
            ]
        }, {
            "sign":
            "‚ôí –í–æ–¥–æ–ª–µ–π",
            "predictions": [
                "–í–∞—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –Ω–∞–π–¥—É—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ.",
                "–£—Ä–∞–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                "–î—Ä—É–∂–±–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω—ã —Å–µ–≥–æ–¥–Ω—è.",
                "–ë—É–¥—É—â–µ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
            ]
        }, {
            "sign":
            "‚ôì –†—ã–±—ã",
            "predictions": [
                "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –º–µ—á—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤—è—Ç –Ω–∞ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è.",
                "–ù–µ–ø—Ç—É–Ω —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –º—É–∑—ã–∫–∞ –ø—Ä–∏–Ω–µ—Å—É—Ç –≥–∞—Ä–º–æ–Ω–∏—é."
            ]
        }]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        chosen_sign = random.choice(signs)
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞
        prediction = random.choice(chosen_sign["predictions"])

        await message.answer(f"{chosen_sign['sign']}: {prediction}")

    elif text == "—Ä–µ—Ü–µ–ø—Ç":
        recipes = [
            "üçù –ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞: —Å–ø–∞–≥–µ—Ç—Ç–∏ + —è–π—Ü–∞ + –±–µ–∫–æ–Ω + —Å—ã—Ä –ø–∞—Ä–º–µ–∑–∞–Ω + —á—ë—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü",
            "ü•ó –ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç: –ø–æ–º–∏–¥–æ—Ä—ã + –æ–≥—É—Ä—Ü—ã + —Ñ–µ—Ç–∞ + –æ–ª–∏–≤–∫–∏ + –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ",
            "üç≤ –ë–æ—Ä—â: —Å–≤—ë–∫–ª–∞ + –∫–∞–ø—É—Å—Ç–∞ + –º–æ—Ä–∫–æ–≤—å + –ª—É–∫ + –º—è—Å–æ + —Å–º–µ—Ç–∞–Ω–∞",
            "ü•™ –ê–≤–æ–∫–∞–¥–æ —Ç–æ—Å—Ç: —Ö–ª–µ–± + –∞–≤–æ–∫–∞–¥–æ + –ª–∏–º–æ–Ω + —Å–æ–ª—å + –ø–µ—Ä–µ—Ü",
            "üçõ –ü–ª–æ–≤: —Ä–∏—Å + –º—è—Å–æ + –º–æ—Ä–∫–æ–≤—å + –ª—É–∫ + —Å–ø–µ—Ü–∏–∏",
            "ü•û –ë–ª–∏–Ω—á–∏–∫–∏: –º—É–∫–∞ + –º–æ–ª–æ–∫–æ + —è–π—Ü–∞ + —Å–∞—Ö–∞—Ä + —Å–æ–ª—å",
            "üçï –ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞: —Ç–µ—Å—Ç–æ + —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å + –º–æ—Ü–∞—Ä–µ–ª–ª–∞ + –±–∞–∑–∏–ª–∏–∫",
            "üçú –†–∞–º–µ–Ω: –ª–∞–ø—à–∞ + –±—É–ª—å–æ–Ω + —è–π—Ü–æ + –∑–µ–ª—ë–Ω—ã–π –ª—É–∫ + –Ω–æ—Ä–∏",
            "üßÄ –°—ã—Ä–Ω–∏–∫–∏: —Ç–≤–æ—Ä–æ–≥ + —è–π—Ü–æ + –º—É–∫–∞ + —Å–∞—Ö–∞—Ä + —Å–º–µ—Ç–∞–Ω–∞",
            "ü•ô –®–∞—É—Ä–º–∞: –ª–∞–≤–∞—à + –º—è—Å–æ + –æ–≤–æ—â–∏ + —Å–æ—É—Å"
        ]
        recipe = random.choice(recipes)
        await message.answer(f"üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç –¥–Ω—è:\n{recipe}")

    elif text == "–∏–≥—Ä–∞":
        games = [
            "üé≤ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ': –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!",
            "üéØ –ò–≥—Ä–∞ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å': –ö–æ—Ä–∞–ª–ª –∏–º–µ–µ—Ç 8 —â—É–ø–∞–ª–µ—Ü ‚Äî –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å?",
            "üß© –ò–≥—Ä–∞ '20 –≤–æ–ø—Ä–æ—Å–æ–≤': –ó–∞–≥–∞–¥–∞–π –ø—Ä–µ–¥–º–µ—Ç, –∞ —è –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å –∑–∞ 20 –≤–æ–ø—Ä–æ—Å–æ–≤!",
            "üé™ –ò–≥—Ä–∞ '–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏': –°–ª–æ–≤–æ '–º–æ—Ä–µ' ‚Äî –∫–∞–∫–∞—è –ø–µ—Ä–≤–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è?",
            "üé≠ –ò–≥—Ä–∞ '–†–∏—Ñ–º–∞': –ü—Ä–∏–¥—É–º–∞–π —Ä–∏—Ñ–º—É –∫ —Å–ª–æ–≤—É '–∫–æ—Ä–∞–ª–ª'!",
            "üé® –ò–≥—Ä–∞ '–û–ø–∏—Å–∞–Ω–∏–µ': –û–ø–∏—à–∏ —Å–º–∞–π–ª–∏–∫ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞–º–∏: üêô",
            "üî§ –ò–≥—Ä–∞ '–ü–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞': –ì–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É '–ú'!",
            "üéµ –ò–≥—Ä–∞ '–ü–µ—Å–Ω—è': –î–æ–ø–æ–π —Å—Ç—Ä–æ—á–∫—É: '–í –ª–µ—Å—É —Ä–æ–¥–∏–ª–∞—Å—å...'",
            "üåç –ò–≥—Ä–∞ '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': –ù–∞–∑–æ–≤–∏ —Å—Ç—Ä–∞–Ω—É –Ω–∞ –±—É–∫–≤—É '–ò'!",
            "üé¨ –ò–≥—Ä–∞ '–§–∏–ª—å–º': –£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: '–†—ã–±–∞-–∫–ª–æ—É–Ω –∏—â–µ—Ç —Å—ã–Ω–∞'"
        ]
        game = random.choice(games)
        await message.answer(f"üéÆ {game}")

    elif text == "–∑–∞–≥–∞–¥–∫–∞":
        riddles = [
            "ü§î –ß—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏? (–û—Ç–≤–µ—Ç: —Å–æ–Ω)",
            "üè† –í –¥–æ–º–µ –µ–≥–æ –Ω–µ—Ç, –∞ –Ω–∞ —É–ª–∏—Ü–µ –µ—Å—Ç—å. –ß—Ç–æ —ç—Ç–æ? (–û—Ç–≤–µ—Ç: –±—É–∫–≤–∞ '–£')",
            "‚è∞ –ß—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ, –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏? (–û—Ç–≤–µ—Ç: —á–∏—Å–ª–æ 6)",
            "üåä –ë–µ–∑ —Ä—É–∫, –±–µ–∑ –Ω–æ–≥, –∞ –≥–æ—Ä—É —Ä–∞–∑—Ä—É—à–∞–µ—Ç. –ß—Ç–æ —ç—Ç–æ? (–û—Ç–≤–µ—Ç: –≤–æ–¥–∞)",
            "üî• –ö—Ä–∞—Å–Ω—ã–π –ø–µ—Ç—É—à–æ–∫ –ø–æ –∂–µ—Ä–¥–æ—á–∫–µ –±–µ–∂–∏—Ç. –ß—Ç–æ —ç—Ç–æ? (–û—Ç–≤–µ—Ç: –æ–≥–æ–Ω—å)",
            "‚ùÑÔ∏è –ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ß—Ç–æ —ç—Ç–æ? (–û—Ç–≤–µ—Ç: —ë–ª–∫–∞)",
            "üåô –ß—Ç–æ –∏–¥—ë—Ç, –Ω–µ –¥–≤–∏–≥–∞—è—Å—å —Å –º–µ—Å—Ç–∞? (–û—Ç–≤–µ—Ç: –≤—Ä–µ–º—è)",
            "üéØ –£ –Ω–µ–≥–æ –µ—Å—Ç—å —à–ª—è–ø–∞, –Ω–æ –Ω–µ—Ç –≥–æ–ª–æ–≤—ã. –ß—Ç–æ —ç—Ç–æ? (–û—Ç–≤–µ—Ç: –≥—Ä–∏–±)",
            "üçØ –ù–µ –º—ë–¥, –∞ –ª–∏–ø–Ω–µ—Ç. –ß—Ç–æ —ç—Ç–æ? (–û—Ç–≤–µ—Ç: –∫–ª–µ–π)",
            "üìö –ö—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö? (–û—Ç–≤–µ—Ç: —ç—Ö–æ)"
        ]
        riddle = random.choice(riddles)
        await message.answer(f"üß© {riddle}")

    elif text == "–∏—Å—Ç–æ—Ä–∏—è":
        stories = [
            "üìö –í 1912 –≥–æ–¥—É —Ç–∏—Ç–∞–Ω–∏–∫ –∑–∞—Ç–æ–Ω—É–ª, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –æ –≥–µ—Ä–æ–∏–∑–º–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞, –∏–≥—Ä–∞–≤—à–µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞, —Å—Ç–∞–ª–∞ –ª–µ–≥–µ–Ω–¥–æ–π.",
            "üè∫ –ö–ª–µ–æ–ø–∞—Ç—Ä–∞ –∂–∏–ª–∞ –±–ª–∏–∂–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ –≤—ã—Å–∞–¥–∫–µ –Ω–∞ –õ—É–Ω—É, —á–µ–º –∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –ø–∏—Ä–∞–º–∏–¥!",
            "üé® –í–∞–Ω –ì–æ–≥ –ø—Ä–æ–¥–∞–ª –∑–∞ –≤—Å—é –∂–∏–∑–Ω—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω—É ‚Äî '–ö—Ä–∞—Å–Ω—ã–µ –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–∏–∫–∏'.",
            "üêò –ù–∞–ø–æ–ª–µ–æ–Ω –±–æ—è–ª—Å—è... –∫–æ—Ç–æ–≤! –£ –≤–µ–ª–∏–∫–æ–≥–æ –ø–æ–ª–∫–æ–≤–æ–¥—Ü–∞ –±—ã–ª–∞ –∞–π–ª—É—Ä–æ—Ñ–æ–±–∏—è.",
            "üì° –§–∞–∫—Å –±—ã–ª –∏–∑–æ–±—Ä–µ—Ç—ë–Ω –≤ 1843 –≥–æ–¥—É ‚Äî –¥–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
            "üóΩ –°—Ç–∞—Ç—É—è –°–≤–æ–±–æ–¥—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–∞ –∫–æ—Ä–∏—á–Ω–µ–≤–æ–π, –Ω–æ –æ–∫–∏—Å–ª–∏–ª–∞—Å—å –¥–æ –∑–µ–ª—ë–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.",
            "ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä—ã –∂–∏–ª–∏ –Ω–∞ –ó–µ–º–ª–µ 165 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç, –∞ –ª—é–¥–∏ ‚Äî –≤—Å–µ–≥–æ 300 —Ç—ã—Å—è—á.",
            "üç´ –®–æ–∫–æ–ª–∞–¥ –∫–æ–≥–¥–∞-—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–∞–∫ –≤–∞–ª—é—Ç–∞ –∞—Ü—Ç–µ–∫–∞–º–∏ –∏ –º–∞–π—è.",
            "üìñ –®–µ–∫—Å–ø–∏—Ä –∏–∑–æ–±—Ä—ë–ª –±–æ–ª–µ–µ 1700 —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ —Å–∏—Ö –ø–æ—Ä.",
            "üöÄ –ù–∏–ª –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥ –æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –õ—É–Ω–µ —Å—É–º–∫—É —Å –º—É—Å–æ—Ä–æ–º ‚Äî –æ–Ω–∞ —Ç–∞–º –¥–æ —Å–∏—Ö –ø–æ—Ä!"
        ]
        story = random.choice(stories)
        await message.answer(f"üìú {story}")

    elif text == "–ø–æ–∫–µ—Ä":
        cards = [
            "üÇ°", "üÇ¢", "üÇ£", "üÇ§", "üÇ•", "üÇ¶", "üÇß", "üÇ®", "üÇ©", "üÇ™", "üÇ´", "üÇ≠", "üÇÆ",
            "üÇ±", "üÇ≤", "üÇ≥", "üÇ¥", "üÇµ", "üÇ∂", "üÇ∑", "üÇ∏", "üÇπ", "üÇ∫", "üÇª", "üÇΩ", "üÇæ",
            "üÉÅ", "üÉÇ", "üÉÉ", "üÉÑ", "üÉÖ", "üÉÜ", "üÉá", "üÉà", "üÉâ", "üÉä", "üÉã", "üÉç", "üÉé",
            "üÉë", "üÉí", "üÉì", "üÉî", "üÉï", "üÉñ", "üÉó", "üÉò", "üÉô", "üÉö", "üÉõ", "üÉù", "üÉû"
        ]
        card_names = [
            "–¢—É–∑ –ø–∏–∫", "–î–≤–æ–π–∫–∞ –ø–∏–∫", "–¢—Ä–æ–π–∫–∞ –ø–∏–∫", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ø–∏–∫",
            "–ü—è—Ç—ë—Ä–∫–∞ –ø–∏–∫", "–®–µ—Å—Ç—ë—Ä–∫–∞ –ø–∏–∫", "–°–µ–º—ë—Ä–∫–∞ –ø–∏–∫", "–í–æ—Å—å–º—ë—Ä–∫–∞ –ø–∏–∫",
            "–î–µ–≤—è—Ç–∫–∞ –ø–∏–∫", "–î–µ—Å—è—Ç–∫–∞ –ø–∏–∫", "–í–∞–ª–µ—Ç –ø–∏–∫", "–î–∞–º–∞ –ø–∏–∫",
            "–ö–æ—Ä–æ–ª—å –ø–∏–∫", "–¢—É–∑ —á–µ—Ä–≤–µ–π", "–î–≤–æ–π–∫–∞ —á–µ—Ä–≤–µ–π", "–¢—Ä–æ–π–∫–∞ —á–µ—Ä–≤–µ–π",
            "–ß–µ—Ç–≤—ë—Ä–∫–∞ —á–µ—Ä–≤–µ–π", "–ü—è—Ç—ë—Ä–∫–∞ —á–µ—Ä–≤–µ–π", "–®–µ—Å—Ç—ë—Ä–∫–∞ —á–µ—Ä–≤–µ–π",
            "–°–µ–º—ë—Ä–∫–∞ —á–µ—Ä–≤–µ–π", "–í–æ—Å—å–º—ë—Ä–∫–∞ —á–µ—Ä–≤–µ–π", "–î–µ–≤—è—Ç–∫–∞ —á–µ—Ä–≤–µ–π",
            "–î–µ—Å—è—Ç–∫–∞ —á–µ—Ä–≤–µ–π", "–í–∞–ª–µ—Ç —á–µ—Ä–≤–µ–π", "–î–∞–º–∞ —á–µ—Ä–≤–µ–π", "–ö–æ—Ä–æ–ª—å —á–µ—Ä–≤–µ–π",
            "–¢—É–∑ –±—É–±–µ–π", "–î–≤–æ–π–∫–∞ –±—É–±–µ–π", "–¢—Ä–æ–π–∫–∞ –±—É–±–µ–π", "–ß–µ—Ç–≤—ë—Ä–∫–∞ –±—É–±–µ–π",
            "–ü—è—Ç—ë—Ä–∫–∞ –±—É–±–µ–π", "–®–µ—Å—Ç—ë—Ä–∫–∞ –±—É–±–µ–π", "–°–µ–º—ë—Ä–∫–∞ –±—É–±–µ–π",
            "–í–æ—Å—å–º—ë—Ä–∫–∞ –±—É–±–µ–π", "–î–µ–≤—è—Ç–∫–∞ –±—É–±–µ–π", "–î–µ—Å—è—Ç–∫–∞ –±—É–±–µ–π", "–í–∞–ª–µ—Ç –±—É–±–µ–π",
            "–î–∞–º–∞ –±—É–±–µ–π", "–ö–æ—Ä–æ–ª—å –±—É–±–µ–π", "–¢—É–∑ —Ç—Ä–µ—Ñ", "–î–≤–æ–π–∫–∞ —Ç—Ä–µ—Ñ",
            "–¢—Ä–æ–π–∫–∞ —Ç—Ä–µ—Ñ", "–ß–µ—Ç–≤—ë—Ä–∫–∞ —Ç—Ä–µ—Ñ", "–ü—è—Ç—ë—Ä–∫–∞ —Ç—Ä–µ—Ñ", "–®–µ—Å—Ç—ë—Ä–∫–∞ —Ç—Ä–µ—Ñ",
            "–°–µ–º—ë—Ä–∫–∞ —Ç—Ä–µ—Ñ", "–í–æ—Å—å–º—ë—Ä–∫–∞ —Ç—Ä–µ—Ñ", "–î–µ–≤—è—Ç–∫–∞ —Ç—Ä–µ—Ñ", "–î–µ—Å—è—Ç–∫–∞ —Ç—Ä–µ—Ñ",
            "–í–∞–ª–µ—Ç —Ç—Ä–µ—Ñ", "–î–∞–º–∞ —Ç—Ä–µ—Ñ", "–ö–æ—Ä–æ–ª—å —Ç—Ä–µ—Ñ"
        ]
        card_index = random.randint(0, len(cards) - 1)
        card = cards[card_index]
        card_name = card_names[card_index]
        await message.answer(f"üé∞ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card} {card_name}")

    elif text == "–º–æ–Ω–µ—Ç–∫–∞":
        coin_results = ["ü™ô –û—Ä—ë–ª!", "ü™ô –†–µ—à–∫–∞!"]
        result = random.choice(coin_results)
        await message.answer(f"üéØ {result}")

    elif text == "–∫—É–±–∏–∫":
        dice_faces = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
        numbers = ["1", "2", "3", "4", "5", "6"]
        dice_index = random.randint(0, 5)
        dice_face = dice_faces[dice_index]
        number = numbers[dice_index]
        await message.answer(f"üé≤ –í—ã–ø–∞–ª–æ: {dice_face} ({number})")

    elif text == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        if not is_group_chat(message):
            await message.answer("üêô –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        await update_chat_members(message.chat.id)

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –∫—ç—à–∞
        file_participants = load_participants_from_file(message.chat.id)
        cache_participants = list(chat_members.get(message.chat.id, set()))
        all_participants = list(set(file_participants + cache_participants))

        admins_count = len(chat_admins.get(message.chat.id, set()))

        stats = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:**

üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_participants)}
üìù –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(file_participants)}
üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤ –∫—ç—à–µ: {len(cache_participants)}
üëë –ê–¥–º–∏–Ω–æ–≤: {admins_count}
üêô –ö–æ—Ä–∞–ª–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"""

        await message.answer(stats, parse_mode=ParseMode.MARKDOWN)

    elif text == "–∞–¥–º–∏–Ω—ã":
        if not is_group_chat(message):
            await message.answer("üêô –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        await update_chat_members(message.chat.id)
        admin_ids = chat_admins.get(message.chat.id, set())

        if not admin_ids:
            await message.answer("ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
            return

        admin_mentions = []
        for admin_id in admin_ids:
            mention = await get_user_mention(admin_id, message.chat.id)
            admin_mentions.append(mention)

        admins_text = "\n".join([f"üëë {mention}" for mention in admin_mentions])
        await message.answer(f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã:**\n\n{admins_text}",
                             parse_mode=ParseMode.MARKDOWN)


@dp.callback_query()
async def handle_registration(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if callback.data.startswith("register_"):
        data_parts = callback.data.split("_")
        chat_id = int(data_parts[1])
        user_id = int(data_parts[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        already_registered = False
        if os.path.exists(participants_file):
            with open(participants_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if f"Chat: {chat_id}, User: {user_id}" in line and "Action: button_register" in line:
                        already_registered = True
                        break

        if already_registered:
            await callback.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if chat_id not in chat_members:
            chat_members[chat_id] = set()

        chat_members[chat_id].add(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        user = callback.from_user
        save_participant(chat_id, user_id, user.username, user.first_name,
                         "button_register")

        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_mention = f"@{user.username}" if user.username else user.first_name
        await callback.message.edit_text(
            f"üéâ {user_mention} –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_reaction()
async def handle_reaction(reaction_update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π"""
    if hasattr(reaction_update, 'user') and reaction_update.user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        save_participant(reaction_update.chat.id, reaction_update.user.id,
                         getattr(reaction_update.user, 'username', None),
                         getattr(reaction_update.user, 'first_name', None),
                         "reaction")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.message()
async def log_activity(message: Message):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ handle_message
    pass


# –°—Ç–∞—Ä—ã–µ slash –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@dp.message(Command("start"))
async def start_cmd(message: Message):
    start_messages = [
        "üêô –ü—Ä–∏–≤–µ—Ç! –Ø –ö–æ—Ä–∞–ª–ª ‚Äî —Ç–≤–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n\n–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã",
        "üåä –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ö–æ—Ä–∞–ª–ª –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!\n\n–ò—Å–ø–æ–ª—å–∑—É–π '–∫–æ–º–∞–Ω–¥—ã' –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\n\n–ù–∞–±–µ—Ä–∏ 'help' –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
    ]
    await message.answer(random.choice(start_messages))


@dp.message(Command("help"))
async def help_cmd(message: Message):
    await handle_message(message, None)


# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)

    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    me = await bot.get_me()
    print(f"‚úÖ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")

    print("üîÑ –ù–∞—á–∏–Ω–∞—é polling...")

    import signal

    def signal_handler(signum, frame):
        print("Received SIGTERM signal")
        raise KeyboardInterrupt

    signal.signal(signal.SIGTERM, signal_handler)

    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
